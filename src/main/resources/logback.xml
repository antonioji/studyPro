<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
	
	<property name="LOG_HOME" value="../log" />

	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			
		      <Pattern>
		      	<!--
		      	%d{yyyy-MM-dd HH:mm:ss} : 년월일 시분초
		      	%thread : thread name 
		      	%-5level : log level , -5는 출력 고정폭 값
		      	%logger{length} :Logger name의 이름, {length}는 자리수
		      	%msg : log message %message은 alias
		      	%n : 줄바꿈
		      	
		      	org.fusesource.jansi:jansi:1.8 가 필요함.
                        Linux ,Mac OS X 기본적으로 지원함
                        <withJansi>true</withJansi>설정후 사용해야함
		      	%highlight : log level 별로 color가 다르게 나옴
		      	-->
		    %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg %n
		      	
		      </Pattern>
		     
		</layout>
	</appender>

	<appender name="file"	class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/stydy-error.log</file>
		 
		 <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
		      <!-- rollover daily -->
		      <fileNamePattern>${LOG_HOME}/study-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
		       <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
		       <maxFileSize>100MB</maxFileSize>    
		       <maxHistory>60</maxHistory>
		       <totalSizeCap>20GB</totalSizeCap>
	    </rollingPolicy>
		  <encoder>
		    <pattern>
		    	%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg %n
		    </pattern>
		  </encoder>
	</appender>
	<!-- 
	 - jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. 
	 - jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. 
	 - jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. 
	 - jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. 
	 - jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
	 -->
	<logger name="jdbc" level="OFF"/>  
	<logger name="jdbc.sqlonly" level="OFF"/>
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="DEBUG"/>
	<logger name="jdbc.connection" level="OFF"/>

	<root level="INFO">
		<appender-ref ref="stdout" />
	</root>
</configuration>